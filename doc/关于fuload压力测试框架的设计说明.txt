一.简介{{{1
公司推崇敏捷开发，所以今天才发现自己居然很久没有写一份完成设计文档，这里写的可能不是很规范，大家就别计较细节了哈~

之前一直觉得，所谓框架，其实都是差不多的东西，能不用就尽量不用，但是经过django，ci，gtest，这几种不同领域的框架的使用，越来越深刻的感觉到框架对于减少开发量，增加代码健壮性的确有着强大的力量，所以也就萌生想写一个通用的压力测试框架的想法（其实也可以说这个想法由来已久，不过之前一直没有仔细考虑过一个压力测试框架所需要实现的功能）。

目前已经在google code上申请了项目，命名为fuload，取full load之意，意为满载运行，计划在项目开发进入正轨之后就加入更多的成员来一起编写。
项目地址如下：
<a href="http://code.google.com/p/fuload/" target="_blank" >http://code.google.com/p/fuload/</a>

二.列举一下需求{{{1
    1.能够在单机上启动多个进程(p0)
    2.能否出报表(p0)
    3.对输入能够自定义，并能够动态替换(p0)
    4.能够实现访问频率限制(p1)
    5.分布式，同时控制多台机器(p1)

即一开始只实现前3点即可，还是要保持pythonic的法则，简单清晰，但是也能支持复杂的应用。

三.概要设计{{{1
先看整体的架构：
1)master{{{2
整个分布式结构的中心节点，主要负责：
    1.向slave发送启动、停止命令
    2.从slave处收集统计信息

由fuload_m_ctrl和fuload_m_proxy，两个进程组成，分别负责数据统计，及端口监听（数据通信）

2)salve{{{2
即实际进行性能测试的机器。
    1.如果是单机模式，则会自己进行统计并给出报表
    2.如果是分布模式，则会向master上报，并接收master命令

由fuload_s_ctrl,fuload_s_proxy,fuload_s_worker，三个进程组成。当单机模式时，fuload_m_proxy可以不必启动。

四.详细设计{{{1
1.单机模式{{{2
我们从单机模式开始讲起，对单机模式来说，salve本身会启动多个fuload_s_worker进程，并经过消息队列将信息通知到fuload_s_ctrl进程，从而给出统计报表。
图示:
                                             
                                    
                           
                                +------+   
                          /     | ctrl |    \
                         /    ^ +------+ ^   \   消息队列（上传和下载）
                        /    /            \   \
                       /    /              \   \
                      /    /                \   \
                     v    /                  \   v
                   +--------+               +--------+
                   | worker |               | worker |
                   +--------+               +--------+


而fuload_s_ctrl负责启动fuload_s_worker进程，并负责给fuload_s_worker以输入信息。

在输入信息这里可以用一些方法来使创建输入数据不要那么复杂，这里参考了vim中snipmate定义的方式和gtest的思想。
输入文件定义：

suite1[1]
    111111 11111 22222
    33333 fffff
suite2[3]
    24242 232
    2342342 33

即每一个不是以空格开头的单词代表用例集的名字，在其之下，每一行是一个的输入数据。而用例集之间是可以有调用权重的，即不同的用例调用的频率不一样，可以通过[x]来定义。这样可以真实的表现出外网的实际情况。
