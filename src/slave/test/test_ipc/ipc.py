# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.1
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.
# This file is compatible with both classic and new-style classes.

from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_ipc', [dirname(__file__)])
        except ImportError:
            import _ipc
            return _ipc
        if fp is not None:
            try:
                _mod = imp.load_module('_ipc', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _ipc = swig_import_helper()
    del swig_import_helper
else:
    import _ipc
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static) or hasattr(self,name):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


IPC_CREAT = _ipc.IPC_CREAT
IPC_EXCL = _ipc.IPC_EXCL
IPC_NOWAIT = _ipc.IPC_NOWAIT
IPC_RMID = _ipc.IPC_RMID
IPC_SET = _ipc.IPC_SET
IPC_STAT = _ipc.IPC_STAT
IPC_INFO = _ipc.IPC_INFO
SHM_R = _ipc.SHM_R
SHM_W = _ipc.SHM_W
SHM_RDONLY = _ipc.SHM_RDONLY
SHM_RND = _ipc.SHM_RND
SHM_REMAP = _ipc.SHM_REMAP
SHM_LOCK = _ipc.SHM_LOCK
SHM_UNLOCK = _ipc.SHM_UNLOCK
SHM_STAT = _ipc.SHM_STAT
SHM_INFO = _ipc.SHM_INFO
SHM_DEST = _ipc.SHM_DEST
SHM_LOCKED = _ipc.SHM_LOCKED
class ipc_perm(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, ipc_perm, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, ipc_perm, name)
    __repr__ = _swig_repr
    __swig_setmethods__["__key"] = _ipc.ipc_perm___key_set
    __swig_getmethods__["__key"] = _ipc.ipc_perm___key_get
    if _newclass:__key = _swig_property(_ipc.ipc_perm___key_get, _ipc.ipc_perm___key_set)
    __swig_setmethods__["uid"] = _ipc.ipc_perm_uid_set
    __swig_getmethods__["uid"] = _ipc.ipc_perm_uid_get
    if _newclass:uid = _swig_property(_ipc.ipc_perm_uid_get, _ipc.ipc_perm_uid_set)
    __swig_setmethods__["gid"] = _ipc.ipc_perm_gid_set
    __swig_getmethods__["gid"] = _ipc.ipc_perm_gid_get
    if _newclass:gid = _swig_property(_ipc.ipc_perm_gid_get, _ipc.ipc_perm_gid_set)
    __swig_setmethods__["cuid"] = _ipc.ipc_perm_cuid_set
    __swig_getmethods__["cuid"] = _ipc.ipc_perm_cuid_get
    if _newclass:cuid = _swig_property(_ipc.ipc_perm_cuid_get, _ipc.ipc_perm_cuid_set)
    __swig_setmethods__["cgid"] = _ipc.ipc_perm_cgid_set
    __swig_getmethods__["cgid"] = _ipc.ipc_perm_cgid_get
    if _newclass:cgid = _swig_property(_ipc.ipc_perm_cgid_get, _ipc.ipc_perm_cgid_set)
    __swig_setmethods__["mode"] = _ipc.ipc_perm_mode_set
    __swig_getmethods__["mode"] = _ipc.ipc_perm_mode_get
    if _newclass:mode = _swig_property(_ipc.ipc_perm_mode_get, _ipc.ipc_perm_mode_set)
    __swig_setmethods__["__seq"] = _ipc.ipc_perm___seq_set
    __swig_getmethods__["__seq"] = _ipc.ipc_perm___seq_get
    if _newclass:__seq = _swig_property(_ipc.ipc_perm___seq_get, _ipc.ipc_perm___seq_set)
    def __init__(self): 
        this = _ipc.new_ipc_perm()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_ipc_perm
    __del__ = lambda self : None;
ipc_perm_swigregister = _ipc.ipc_perm_swigregister
ipc_perm_swigregister(ipc_perm)

class shmid_ds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shmid_ds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shmid_ds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shm_perm"] = _ipc.shmid_ds_shm_perm_set
    __swig_getmethods__["shm_perm"] = _ipc.shmid_ds_shm_perm_get
    if _newclass:shm_perm = _swig_property(_ipc.shmid_ds_shm_perm_get, _ipc.shmid_ds_shm_perm_set)
    __swig_setmethods__["shm_segsz"] = _ipc.shmid_ds_shm_segsz_set
    __swig_getmethods__["shm_segsz"] = _ipc.shmid_ds_shm_segsz_get
    if _newclass:shm_segsz = _swig_property(_ipc.shmid_ds_shm_segsz_get, _ipc.shmid_ds_shm_segsz_set)
    __swig_setmethods__["shm_atime"] = _ipc.shmid_ds_shm_atime_set
    __swig_getmethods__["shm_atime"] = _ipc.shmid_ds_shm_atime_get
    if _newclass:shm_atime = _swig_property(_ipc.shmid_ds_shm_atime_get, _ipc.shmid_ds_shm_atime_set)
    __swig_setmethods__["shm_dtime"] = _ipc.shmid_ds_shm_dtime_set
    __swig_getmethods__["shm_dtime"] = _ipc.shmid_ds_shm_dtime_get
    if _newclass:shm_dtime = _swig_property(_ipc.shmid_ds_shm_dtime_get, _ipc.shmid_ds_shm_dtime_set)
    __swig_setmethods__["shm_ctime"] = _ipc.shmid_ds_shm_ctime_set
    __swig_getmethods__["shm_ctime"] = _ipc.shmid_ds_shm_ctime_get
    if _newclass:shm_ctime = _swig_property(_ipc.shmid_ds_shm_ctime_get, _ipc.shmid_ds_shm_ctime_set)
    __swig_setmethods__["shm_cpid"] = _ipc.shmid_ds_shm_cpid_set
    __swig_getmethods__["shm_cpid"] = _ipc.shmid_ds_shm_cpid_get
    if _newclass:shm_cpid = _swig_property(_ipc.shmid_ds_shm_cpid_get, _ipc.shmid_ds_shm_cpid_set)
    __swig_setmethods__["shm_lpid"] = _ipc.shmid_ds_shm_lpid_set
    __swig_getmethods__["shm_lpid"] = _ipc.shmid_ds_shm_lpid_get
    if _newclass:shm_lpid = _swig_property(_ipc.shmid_ds_shm_lpid_get, _ipc.shmid_ds_shm_lpid_set)
    __swig_setmethods__["shm_nattch"] = _ipc.shmid_ds_shm_nattch_set
    __swig_getmethods__["shm_nattch"] = _ipc.shmid_ds_shm_nattch_get
    if _newclass:shm_nattch = _swig_property(_ipc.shmid_ds_shm_nattch_get, _ipc.shmid_ds_shm_nattch_set)
    __swig_setmethods__["__shm_npages"] = _ipc.shmid_ds___shm_npages_set
    __swig_getmethods__["__shm_npages"] = _ipc.shmid_ds___shm_npages_get
    if _newclass:__shm_npages = _swig_property(_ipc.shmid_ds___shm_npages_get, _ipc.shmid_ds___shm_npages_set)
    __swig_setmethods__["__shm_pages"] = _ipc.shmid_ds___shm_pages_set
    __swig_getmethods__["__shm_pages"] = _ipc.shmid_ds___shm_pages_get
    if _newclass:__shm_pages = _swig_property(_ipc.shmid_ds___shm_pages_get, _ipc.shmid_ds___shm_pages_set)
    __swig_setmethods__["__attaches"] = _ipc.shmid_ds___attaches_set
    __swig_getmethods__["__attaches"] = _ipc.shmid_ds___attaches_get
    if _newclass:__attaches = _swig_property(_ipc.shmid_ds___attaches_get, _ipc.shmid_ds___attaches_set)
    def __init__(self): 
        this = _ipc.new_shmid_ds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_shmid_ds
    __del__ = lambda self : None;
shmid_ds_swigregister = _ipc.shmid_ds_swigregister
shmid_ds_swigregister(shmid_ds)

class shminfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shminfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shminfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["shmmax"] = _ipc.shminfo_shmmax_set
    __swig_getmethods__["shmmax"] = _ipc.shminfo_shmmax_get
    if _newclass:shmmax = _swig_property(_ipc.shminfo_shmmax_get, _ipc.shminfo_shmmax_set)
    __swig_setmethods__["shmmin"] = _ipc.shminfo_shmmin_set
    __swig_getmethods__["shmmin"] = _ipc.shminfo_shmmin_get
    if _newclass:shmmin = _swig_property(_ipc.shminfo_shmmin_get, _ipc.shminfo_shmmin_set)
    __swig_setmethods__["shmmni"] = _ipc.shminfo_shmmni_set
    __swig_getmethods__["shmmni"] = _ipc.shminfo_shmmni_get
    if _newclass:shmmni = _swig_property(_ipc.shminfo_shmmni_get, _ipc.shminfo_shmmni_set)
    __swig_setmethods__["shmseg"] = _ipc.shminfo_shmseg_set
    __swig_getmethods__["shmseg"] = _ipc.shminfo_shmseg_get
    if _newclass:shmseg = _swig_property(_ipc.shminfo_shmseg_get, _ipc.shminfo_shmseg_set)
    __swig_setmethods__["shmall"] = _ipc.shminfo_shmall_set
    __swig_getmethods__["shmall"] = _ipc.shminfo_shmall_get
    if _newclass:shmall = _swig_property(_ipc.shminfo_shmall_get, _ipc.shminfo_shmall_set)
    def __init__(self): 
        this = _ipc.new_shminfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_shminfo
    __del__ = lambda self : None;
shminfo_swigregister = _ipc.shminfo_swigregister
shminfo_swigregister(shminfo)

class shm_info(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, shm_info, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, shm_info, name)
    __repr__ = _swig_repr
    __swig_setmethods__["used_ids"] = _ipc.shm_info_used_ids_set
    __swig_getmethods__["used_ids"] = _ipc.shm_info_used_ids_get
    if _newclass:used_ids = _swig_property(_ipc.shm_info_used_ids_get, _ipc.shm_info_used_ids_set)
    __swig_setmethods__["shm_tot"] = _ipc.shm_info_shm_tot_set
    __swig_getmethods__["shm_tot"] = _ipc.shm_info_shm_tot_get
    if _newclass:shm_tot = _swig_property(_ipc.shm_info_shm_tot_get, _ipc.shm_info_shm_tot_set)
    __swig_setmethods__["shm_rss"] = _ipc.shm_info_shm_rss_set
    __swig_getmethods__["shm_rss"] = _ipc.shm_info_shm_rss_get
    if _newclass:shm_rss = _swig_property(_ipc.shm_info_shm_rss_get, _ipc.shm_info_shm_rss_set)
    __swig_setmethods__["shm_swp"] = _ipc.shm_info_shm_swp_set
    __swig_getmethods__["shm_swp"] = _ipc.shm_info_shm_swp_get
    if _newclass:shm_swp = _swig_property(_ipc.shm_info_shm_swp_get, _ipc.shm_info_shm_swp_set)
    __swig_setmethods__["swap_attempts"] = _ipc.shm_info_swap_attempts_set
    __swig_getmethods__["swap_attempts"] = _ipc.shm_info_swap_attempts_get
    if _newclass:swap_attempts = _swig_property(_ipc.shm_info_swap_attempts_get, _ipc.shm_info_swap_attempts_set)
    __swig_setmethods__["swap_successes"] = _ipc.shm_info_swap_successes_set
    __swig_getmethods__["swap_successes"] = _ipc.shm_info_swap_successes_get
    if _newclass:swap_successes = _swig_property(_ipc.shm_info_swap_successes_get, _ipc.shm_info_swap_successes_set)
    def __init__(self): 
        this = _ipc.new_shm_info()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_shm_info
    __del__ = lambda self : None;
shm_info_swigregister = _ipc.shm_info_swigregister
shm_info_swigregister(shm_info)

SEM_UNDO = _ipc.SEM_UNDO
GETPID = _ipc.GETPID
GETVAL = _ipc.GETVAL
GETALL = _ipc.GETALL
GETNCNT = _ipc.GETNCNT
GETZCNT = _ipc.GETZCNT
SETVAL = _ipc.SETVAL
SETALL = _ipc.SETALL
class semid_ds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, semid_ds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, semid_ds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["sem_perm"] = _ipc.semid_ds_sem_perm_set
    __swig_getmethods__["sem_perm"] = _ipc.semid_ds_sem_perm_get
    if _newclass:sem_perm = _swig_property(_ipc.semid_ds_sem_perm_get, _ipc.semid_ds_sem_perm_set)
    __swig_setmethods__["sem_otime"] = _ipc.semid_ds_sem_otime_set
    __swig_getmethods__["sem_otime"] = _ipc.semid_ds_sem_otime_get
    if _newclass:sem_otime = _swig_property(_ipc.semid_ds_sem_otime_get, _ipc.semid_ds_sem_otime_set)
    __swig_setmethods__["sem_ctime"] = _ipc.semid_ds_sem_ctime_set
    __swig_getmethods__["sem_ctime"] = _ipc.semid_ds_sem_ctime_get
    if _newclass:sem_ctime = _swig_property(_ipc.semid_ds_sem_ctime_get, _ipc.semid_ds_sem_ctime_set)
    __swig_setmethods__["__sembase"] = _ipc.semid_ds___sembase_set
    __swig_getmethods__["__sembase"] = _ipc.semid_ds___sembase_get
    if _newclass:__sembase = _swig_property(_ipc.semid_ds___sembase_get, _ipc.semid_ds___sembase_set)
    __swig_setmethods__["__sem_pending"] = _ipc.semid_ds___sem_pending_set
    __swig_getmethods__["__sem_pending"] = _ipc.semid_ds___sem_pending_get
    if _newclass:__sem_pending = _swig_property(_ipc.semid_ds___sem_pending_get, _ipc.semid_ds___sem_pending_set)
    __swig_setmethods__["__sem_pending_last"] = _ipc.semid_ds___sem_pending_last_set
    __swig_getmethods__["__sem_pending_last"] = _ipc.semid_ds___sem_pending_last_get
    if _newclass:__sem_pending_last = _swig_property(_ipc.semid_ds___sem_pending_last_get, _ipc.semid_ds___sem_pending_last_set)
    __swig_setmethods__["__undo"] = _ipc.semid_ds___undo_set
    __swig_getmethods__["__undo"] = _ipc.semid_ds___undo_get
    if _newclass:__undo = _swig_property(_ipc.semid_ds___undo_get, _ipc.semid_ds___undo_set)
    __swig_setmethods__["sem_nsems"] = _ipc.semid_ds_sem_nsems_set
    __swig_getmethods__["sem_nsems"] = _ipc.semid_ds_sem_nsems_get
    if _newclass:sem_nsems = _swig_property(_ipc.semid_ds_sem_nsems_get, _ipc.semid_ds_sem_nsems_set)
    def __init__(self): 
        this = _ipc.new_semid_ds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_semid_ds
    __del__ = lambda self : None;
semid_ds_swigregister = _ipc.semid_ds_swigregister
semid_ds_swigregister(semid_ds)

class semun(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, semun, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, semun, name)
    __repr__ = _swig_repr
    __swig_setmethods__["val"] = _ipc.semun_val_set
    __swig_getmethods__["val"] = _ipc.semun_val_get
    if _newclass:val = _swig_property(_ipc.semun_val_get, _ipc.semun_val_set)
    __swig_setmethods__["buf"] = _ipc.semun_buf_set
    __swig_getmethods__["buf"] = _ipc.semun_buf_get
    if _newclass:buf = _swig_property(_ipc.semun_buf_get, _ipc.semun_buf_set)
    __swig_setmethods__["array"] = _ipc.semun_array_set
    __swig_getmethods__["array"] = _ipc.semun_array_get
    if _newclass:array = _swig_property(_ipc.semun_array_get, _ipc.semun_array_set)
    __swig_setmethods__["__buf"] = _ipc.semun___buf_set
    __swig_getmethods__["__buf"] = _ipc.semun___buf_get
    if _newclass:__buf = _swig_property(_ipc.semun___buf_get, _ipc.semun___buf_set)
    def __init__(self): 
        this = _ipc.new_semun()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_semun
    __del__ = lambda self : None;
semun_swigregister = _ipc.semun_swigregister
semun_swigregister(semun)

SEM_STAT = _ipc.SEM_STAT
SEM_INFO = _ipc.SEM_INFO
class seminfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, seminfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, seminfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["semmap"] = _ipc.seminfo_semmap_set
    __swig_getmethods__["semmap"] = _ipc.seminfo_semmap_get
    if _newclass:semmap = _swig_property(_ipc.seminfo_semmap_get, _ipc.seminfo_semmap_set)
    __swig_setmethods__["semmni"] = _ipc.seminfo_semmni_set
    __swig_getmethods__["semmni"] = _ipc.seminfo_semmni_get
    if _newclass:semmni = _swig_property(_ipc.seminfo_semmni_get, _ipc.seminfo_semmni_set)
    __swig_setmethods__["semmns"] = _ipc.seminfo_semmns_set
    __swig_getmethods__["semmns"] = _ipc.seminfo_semmns_get
    if _newclass:semmns = _swig_property(_ipc.seminfo_semmns_get, _ipc.seminfo_semmns_set)
    __swig_setmethods__["semmnu"] = _ipc.seminfo_semmnu_set
    __swig_getmethods__["semmnu"] = _ipc.seminfo_semmnu_get
    if _newclass:semmnu = _swig_property(_ipc.seminfo_semmnu_get, _ipc.seminfo_semmnu_set)
    __swig_setmethods__["semmsl"] = _ipc.seminfo_semmsl_set
    __swig_getmethods__["semmsl"] = _ipc.seminfo_semmsl_get
    if _newclass:semmsl = _swig_property(_ipc.seminfo_semmsl_get, _ipc.seminfo_semmsl_set)
    __swig_setmethods__["semopm"] = _ipc.seminfo_semopm_set
    __swig_getmethods__["semopm"] = _ipc.seminfo_semopm_get
    if _newclass:semopm = _swig_property(_ipc.seminfo_semopm_get, _ipc.seminfo_semopm_set)
    __swig_setmethods__["semume"] = _ipc.seminfo_semume_set
    __swig_getmethods__["semume"] = _ipc.seminfo_semume_get
    if _newclass:semume = _swig_property(_ipc.seminfo_semume_get, _ipc.seminfo_semume_set)
    __swig_setmethods__["semusz"] = _ipc.seminfo_semusz_set
    __swig_getmethods__["semusz"] = _ipc.seminfo_semusz_get
    if _newclass:semusz = _swig_property(_ipc.seminfo_semusz_get, _ipc.seminfo_semusz_set)
    __swig_setmethods__["semvmx"] = _ipc.seminfo_semvmx_set
    __swig_getmethods__["semvmx"] = _ipc.seminfo_semvmx_get
    if _newclass:semvmx = _swig_property(_ipc.seminfo_semvmx_get, _ipc.seminfo_semvmx_set)
    __swig_setmethods__["semaem"] = _ipc.seminfo_semaem_set
    __swig_getmethods__["semaem"] = _ipc.seminfo_semaem_get
    if _newclass:semaem = _swig_property(_ipc.seminfo_semaem_get, _ipc.seminfo_semaem_set)
    def __init__(self): 
        this = _ipc.new_seminfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_seminfo
    __del__ = lambda self : None;
seminfo_swigregister = _ipc.seminfo_swigregister
seminfo_swigregister(seminfo)

class msgbuf(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msgbuf, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msgbuf, name)
    __repr__ = _swig_repr
    __swig_setmethods__["mtype"] = _ipc.msgbuf_mtype_set
    __swig_getmethods__["mtype"] = _ipc.msgbuf_mtype_get
    if _newclass:mtype = _swig_property(_ipc.msgbuf_mtype_get, _ipc.msgbuf_mtype_set)
    __swig_setmethods__["mtext"] = _ipc.msgbuf_mtext_set
    __swig_getmethods__["mtext"] = _ipc.msgbuf_mtext_get
    if _newclass:mtext = _swig_property(_ipc.msgbuf_mtext_get, _ipc.msgbuf_mtext_set)
    def __init__(self): 
        this = _ipc.new_msgbuf()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_msgbuf
    __del__ = lambda self : None;
msgbuf_swigregister = _ipc.msgbuf_swigregister
msgbuf_swigregister(msgbuf)

MSG_NOERROR = _ipc.MSG_NOERROR
MSG_EXCEPT = _ipc.MSG_EXCEPT
class msqid_ds(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msqid_ds, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msqid_ds, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msg_perm"] = _ipc.msqid_ds_msg_perm_set
    __swig_getmethods__["msg_perm"] = _ipc.msqid_ds_msg_perm_get
    if _newclass:msg_perm = _swig_property(_ipc.msqid_ds_msg_perm_get, _ipc.msqid_ds_msg_perm_set)
    __swig_setmethods__["__msg_first"] = _ipc.msqid_ds___msg_first_set
    __swig_getmethods__["__msg_first"] = _ipc.msqid_ds___msg_first_get
    if _newclass:__msg_first = _swig_property(_ipc.msqid_ds___msg_first_get, _ipc.msqid_ds___msg_first_set)
    __swig_setmethods__["__msg_last"] = _ipc.msqid_ds___msg_last_set
    __swig_getmethods__["__msg_last"] = _ipc.msqid_ds___msg_last_get
    if _newclass:__msg_last = _swig_property(_ipc.msqid_ds___msg_last_get, _ipc.msqid_ds___msg_last_set)
    __swig_setmethods__["msg_stime"] = _ipc.msqid_ds_msg_stime_set
    __swig_getmethods__["msg_stime"] = _ipc.msqid_ds_msg_stime_get
    if _newclass:msg_stime = _swig_property(_ipc.msqid_ds_msg_stime_get, _ipc.msqid_ds_msg_stime_set)
    __swig_setmethods__["msg_rtime"] = _ipc.msqid_ds_msg_rtime_set
    __swig_getmethods__["msg_rtime"] = _ipc.msqid_ds_msg_rtime_get
    if _newclass:msg_rtime = _swig_property(_ipc.msqid_ds_msg_rtime_get, _ipc.msqid_ds_msg_rtime_set)
    __swig_setmethods__["msg_ctime"] = _ipc.msqid_ds_msg_ctime_set
    __swig_getmethods__["msg_ctime"] = _ipc.msqid_ds_msg_ctime_get
    if _newclass:msg_ctime = _swig_property(_ipc.msqid_ds_msg_ctime_get, _ipc.msqid_ds_msg_ctime_set)
    __swig_setmethods__["__wwait"] = _ipc.msqid_ds___wwait_set
    __swig_getmethods__["__wwait"] = _ipc.msqid_ds___wwait_get
    if _newclass:__wwait = _swig_property(_ipc.msqid_ds___wwait_get, _ipc.msqid_ds___wwait_set)
    __swig_setmethods__["__rwait"] = _ipc.msqid_ds___rwait_set
    __swig_getmethods__["__rwait"] = _ipc.msqid_ds___rwait_get
    if _newclass:__rwait = _swig_property(_ipc.msqid_ds___rwait_get, _ipc.msqid_ds___rwait_set)
    __swig_setmethods__["__msg_cbytes"] = _ipc.msqid_ds___msg_cbytes_set
    __swig_getmethods__["__msg_cbytes"] = _ipc.msqid_ds___msg_cbytes_get
    if _newclass:__msg_cbytes = _swig_property(_ipc.msqid_ds___msg_cbytes_get, _ipc.msqid_ds___msg_cbytes_set)
    __swig_setmethods__["msg_qnum"] = _ipc.msqid_ds_msg_qnum_set
    __swig_getmethods__["msg_qnum"] = _ipc.msqid_ds_msg_qnum_get
    if _newclass:msg_qnum = _swig_property(_ipc.msqid_ds_msg_qnum_get, _ipc.msqid_ds_msg_qnum_set)
    __swig_setmethods__["msg_qbytes"] = _ipc.msqid_ds_msg_qbytes_set
    __swig_getmethods__["msg_qbytes"] = _ipc.msqid_ds_msg_qbytes_get
    if _newclass:msg_qbytes = _swig_property(_ipc.msqid_ds_msg_qbytes_get, _ipc.msqid_ds_msg_qbytes_set)
    __swig_setmethods__["msg_lspid"] = _ipc.msqid_ds_msg_lspid_set
    __swig_getmethods__["msg_lspid"] = _ipc.msqid_ds_msg_lspid_get
    if _newclass:msg_lspid = _swig_property(_ipc.msqid_ds_msg_lspid_get, _ipc.msqid_ds_msg_lspid_set)
    __swig_setmethods__["msg_lrpid"] = _ipc.msqid_ds_msg_lrpid_set
    __swig_getmethods__["msg_lrpid"] = _ipc.msqid_ds_msg_lrpid_get
    if _newclass:msg_lrpid = _swig_property(_ipc.msqid_ds_msg_lrpid_get, _ipc.msqid_ds_msg_lrpid_set)
    def __init__(self): 
        this = _ipc.new_msqid_ds()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_msqid_ds
    __del__ = lambda self : None;
msqid_ds_swigregister = _ipc.msqid_ds_swigregister
msqid_ds_swigregister(msqid_ds)

MSG_STAT = _ipc.MSG_STAT
MSG_INFO = _ipc.MSG_INFO
class msginfo(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, msginfo, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, msginfo, name)
    __repr__ = _swig_repr
    __swig_setmethods__["msgpool"] = _ipc.msginfo_msgpool_set
    __swig_getmethods__["msgpool"] = _ipc.msginfo_msgpool_get
    if _newclass:msgpool = _swig_property(_ipc.msginfo_msgpool_get, _ipc.msginfo_msgpool_set)
    __swig_setmethods__["msgmap"] = _ipc.msginfo_msgmap_set
    __swig_getmethods__["msgmap"] = _ipc.msginfo_msgmap_get
    if _newclass:msgmap = _swig_property(_ipc.msginfo_msgmap_get, _ipc.msginfo_msgmap_set)
    __swig_setmethods__["msgmax"] = _ipc.msginfo_msgmax_set
    __swig_getmethods__["msgmax"] = _ipc.msginfo_msgmax_get
    if _newclass:msgmax = _swig_property(_ipc.msginfo_msgmax_get, _ipc.msginfo_msgmax_set)
    __swig_setmethods__["msgmnb"] = _ipc.msginfo_msgmnb_set
    __swig_getmethods__["msgmnb"] = _ipc.msginfo_msgmnb_get
    if _newclass:msgmnb = _swig_property(_ipc.msginfo_msgmnb_get, _ipc.msginfo_msgmnb_set)
    __swig_setmethods__["msgmni"] = _ipc.msginfo_msgmni_set
    __swig_getmethods__["msgmni"] = _ipc.msginfo_msgmni_get
    if _newclass:msgmni = _swig_property(_ipc.msginfo_msgmni_get, _ipc.msginfo_msgmni_set)
    __swig_setmethods__["msgssz"] = _ipc.msginfo_msgssz_set
    __swig_getmethods__["msgssz"] = _ipc.msginfo_msgssz_get
    if _newclass:msgssz = _swig_property(_ipc.msginfo_msgssz_get, _ipc.msginfo_msgssz_set)
    __swig_setmethods__["msgtql"] = _ipc.msginfo_msgtql_set
    __swig_getmethods__["msgtql"] = _ipc.msginfo_msgtql_get
    if _newclass:msgtql = _swig_property(_ipc.msginfo_msgtql_get, _ipc.msginfo_msgtql_set)
    __swig_setmethods__["msgseg"] = _ipc.msginfo_msgseg_set
    __swig_getmethods__["msgseg"] = _ipc.msginfo_msgseg_get
    if _newclass:msgseg = _swig_property(_ipc.msginfo_msgseg_get, _ipc.msginfo_msgseg_set)
    def __init__(self): 
        this = _ipc.new_msginfo()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _ipc.delete_msginfo
    __del__ = lambda self : None;
msginfo_swigregister = _ipc.msginfo_swigregister
msginfo_swigregister(msginfo)


def ftok(*args):
  return _ipc.ftok(*args)
ftok = _ipc.ftok

def shmget(*args):
  return _ipc.shmget(*args)
shmget = _ipc.shmget

def shmat(*args):
  return _ipc.shmat(*args)
shmat = _ipc.shmat

def shmdt(*args):
  return _ipc.shmdt(*args)
shmdt = _ipc.shmdt

def shmctl(*args):
  return _ipc.shmctl(*args)
shmctl = _ipc.shmctl

def semget(*args):
  return _ipc.semget(*args)
semget = _ipc.semget

def semctl(*args):
  return _ipc.semctl(*args)
semctl = _ipc.semctl

def semop(*args):
  return _ipc.semop(*args)
semop = _ipc.semop

def msgget(*args):
  return _ipc.msgget(*args)
msgget = _ipc.msgget

def msgctl(*args):
  return _ipc.msgctl(*args)
msgctl = _ipc.msgctl

def msgsnd(*args):
  return _ipc.msgsnd(*args)
msgsnd = _ipc.msgsnd

def msgrcv(*args):
  return _ipc.msgrcv(*args)
msgrcv = _ipc.msgrcv


